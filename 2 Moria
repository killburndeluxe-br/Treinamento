import random
from tarfile import OutsideDestinationError

dicionario = {
    1: "Nothing",
    2: "Passage bends left",
    3: "Passage bends right",
    4: "Passage straightens",
    5: "Passage slopes down",
    6: "Passage slopes up",
    7: "Passage levels off",
    8: "Dead-end",
    9: "Light Shaft",
    10: "Spring Pool/Well",
    11: "Creek-through",
    12: "lava pool",
    13: "Guard-post",
    14: "Acessway",
    15: "Mineway",
    16: "Stairwell",
    17: "Rampway",
    18: "Elevator",
    19: "Slide Chute",
    20: "Pole Chute",
    21: "River",
    22: "Pit",
    23: "Minor Chasm",
    24: "Dwarf-lodgings",
    25: "Crypt",
    26: "Store-room",
    27: "Smelting-hall",
    28: "Forging-hall",
    29: "Metal-hall",
    30: "Dungeon",
    31: "Craft Chamber",
    32: "Minor Armory",
    33: "Muster Room",
    34: "Guard Chamber",
    35: "Reception Room",
    36: "Barrack/Mess Halls",
    37: "Library",
    38: "Watch Room",
    39: "Cavern/Grotto",
    40: "Store-hall",
    41: "Excavation Chamber",
    42: "Quarry",
    43: "Large-elevator Hall",
    44: "Junction Chamber",
    45: "Special",
    46: "that up one tier",
    47: "that down one tier",
    48: "that up and down one tier",
    49: "that up two tiers",
    50: "that down two tiers",
}

def roll_d100():
    return random.randint(1, 100)

def city_avenue():
    roll = roll_d100()
    vertical = None
    if 1 <= roll <= 40:
        return 1, None
    elif 41 <= roll <= 45:
        return 9, None
    elif 46 <= roll <= 50:
        return 10, None
    elif 51 <= roll <= 55:
        return 11, None
    elif 56 <= roll <= 65:
        return 13, None
    elif 66 <= roll <= 85:
        return 14, None
    elif 86 <= roll <= 89:
        return 16, sortear_movimento_vertical()
    elif 90 <= roll <= 92:
        return 17, sortear_movimento_vertical()
    elif roll in [93, 94]:
        return 18, sortear_movimento_vertical()
    elif roll in [95, 96]:
        return 19, sortear_movimento_vertical()
    elif roll in [97, 98]:
        return 20, sortear_movimento_vertical()
    else:
        return 45, None


def city_road_upper():
    roll = roll_d100()
    vertical = None
    if 1 <= roll <= 15:
        return 1, None
    elif 16 <= roll <= 19:
        return 9, None
    elif roll in [20, 21]:
        return 10, None
    elif roll in [22, 23]:
        return 11, None
    elif roll in [24, 25]:
        return 13, None
    elif 26 <= roll <= 40:
        return 14, None
    elif roll in [41, 42]:
        return 16, sortear_movimento_vertical()
    elif roll in [43, 44]:
        return 17, sortear_movimento_vertical()
    elif roll == 45:
        return 18, sortear_movimento_vertical()
    elif roll == 46:
        return 19, sortear_movimento_vertical()
    elif roll == 47:
        return 20, sortear_movimento_vertical()
    elif roll == 48:
        return 21, None
    elif roll == 49:
        return 22, None
    elif roll == 50:
        return 23, None
    elif 51 <= roll <= 76:
        return 24, None
    elif 77 <= roll <= 80:
        return 25, None
    elif 81 <= roll <= 92:
        return 26, None
    elif 93 <= roll <= 95:
        return 37, None
    elif 96 <= roll <= 98:
        return 38, None
    else:
        return 45, None

def city_road_central():
    roll = roll_d100()
    vertical = None
    if 1 <= roll <= 10:
        return 1, None
    elif 11 <= roll <= 13:
        return 9, None
    elif 14 <= roll <= 15:
        return 10, None
    elif 16 <= roll <= 17:
        return 11, None
    elif 18 <= roll <= 20:
        return 13, None
    elif 21 <= roll <= 35:
        return 14, None
    elif 36 <= roll <= 38:
        return 16, sortear_movimento_vertical()
    elif 39 <= roll <= 41:
        return 17, sortear_movimento_vertical()
    elif roll == 42:
        return 18, sortear_movimento_vertical()
    elif roll == 43:
        return 19, sortear_movimento_vertical()
    elif roll == 44:
        return 20, sortear_movimento_vertical()
    elif roll == 45:
        return 21, None
    elif roll == 46:
        return 22, None
    elif roll == 47:
        return 23, None
    elif 48 <= roll <= 57:
        return 24, None
    elif 58 <= roll <= 62:
        return 25, None
    elif 63 <= roll <= 77:
        return 26, None
    elif 78 <= roll <= 80:
        return 32, None
    elif 81 <= roll <= 84:
        return 33, None
    elif 85 <= roll <= 88:
        return 34, None
    elif 89 <= roll <= 90:
        return 35, None
    elif 91 <= roll <= 98:
        return 36, None
    else:
        return 45, None

def city_road_lower():
    roll = roll_d100()
    vertical = None
    if 1 <= roll <= 15:
        return 1, None
    elif roll == 16:
        return 9, None
    elif roll == 17:
        return 10, None
    elif roll == 18:
        return 11, None
    elif 19 <= roll <= 21:
        return 12, None
    elif 22 <= roll <= 23:
        return 13, None
    elif 24 <= roll <= 38:
        return 14, None
    elif 39 <= roll <= 40:
        return 16, sortear_movimento_vertical()
    elif 41 <= roll <= 42:
        return 17, sortear_movimento_vertical()
    elif roll == 43:
        return 18, sortear_movimento_vertical()
    elif roll == 44:
        return 19, sortear_movimento_vertical()
    elif roll == 45:
        return 20, sortear_movimento_vertical()
    elif roll in [46, 47]:
        return 21, None
    elif roll in [48, 49]:
        return 22, None
    elif roll in [50, 51]:
        return 23, None
    elif roll in [52, 53]:
        return 24, None
    elif 54 <= roll <= 65:
        return 25, None
    elif 66 <= roll <= 73:
        return 26, None
    elif 74 <= roll <= 76:
        return 27, None
    elif 77 <= roll <= 79:
        return 28, None
    elif 80 <= roll <= 82:
        return 29, None
    elif 83 <= roll <= 85:
        return 30, None
    elif 86 <= roll <= 88:
        return 31, None
    elif 89 <= roll <= 98:
        return 39, None
    else:
        return 45, None

def city_accessway_upper():
    roll = roll_d100()
    vertical = None
    if 1 <= roll <= 10:
        return 1, None
    elif 11 <= roll <= 15:
        return 2, None
    elif 16 <= roll <= 20:
        return 3, None
    elif 21 <= roll <= 25:
        return 4, None
    elif 26 <= roll <= 26:
        return 5, None
    elif 30 <= roll <= 31:
        return 6, None
    elif 32 <= roll <= 36:
        return 7, None
    elif 37 <= roll <= 39:
        return 8, None
    elif roll in [40, 41]:
        return 9, None
    elif roll == 42:
        return 10, None
    elif roll == 43:
        return 11, None
    elif 44 <= roll <= 58:
        return 14, None
    elif roll in [59, 60]:
        return 16, sortear_movimento_vertical()
    elif roll in [61, 62]:
        return 19, sortear_movimento_vertical()
    elif roll in [63, 64]:
        return 20, sortear_movimento_vertical()
    elif roll == 65:
        return 21, None
    elif roll in [66, 67]:
        return 22, None
    elif roll in [68, 69]:
        return 23, None
    elif 70 <= roll <= 81:
        return 24, None
    elif 82 <= roll <= 85:
        return 25, None
    elif 86 <= roll <= 91:
        return 26, None
    elif roll in [92, 93]:
        return 37, None
    elif roll in [94, 95]:
        return 38, None
    else:
        return 45, None

def city_accessway_central():
    roll = roll_d100()
    vertical = None
    if 1 <= roll <= 10:
        return 1, None
    elif 11 <= roll <= 15:
        return 2, None
    elif 16 <= roll <= 20:
        return 3, None
    elif 21 <= roll <= 25:
        return 4, None
    elif 26 <= roll <= 28:
        return 5, None
    elif 26 <= roll <= 31:
        return 6, None
    elif 32 <= roll <= 36:
        return 7, None
    elif 37 <= roll <= 38:
        return 8, None
    elif roll == 39:
        return 9, None
    elif roll == 40:
        return 10, None
    elif roll == 41:
        return 11, None
    elif 42 <= roll <= 56:
        return 14, None
    elif roll in [57, 58]:
        return 16, sortear_movimento_vertical()
    elif 59 <= roll <= 61:
        return 19, sortear_movimento_vertical()
    elif 62 <= roll <= 64:
        return 20, sortear_movimento_vertical()
    elif roll == 65:
        return 21, None
    elif roll in [66, 67]:
        return 22, None
    elif roll in [68, 69]:
        return 23, None
    elif 70 <= roll <= 74:
        return 24, None
    elif 75 <= roll <= 78:
        return 25, None
    elif 79 <= roll <= 85:
        return 26, None
    elif roll == 86:
        return 32, None
    elif roll in [87, 88]:
        return 33, None
    elif roll in [89, 90]:
        return 34, None
    elif roll == 91:
        return 35, None
    elif 92 <= roll <= 95:
        return 36, None
    else:
        return 45, None

def city_accessway_lower():
    roll = roll_d100()
    vertical = None
    if 1 <= roll <= 10:
        return 1, None
    elif 11 <= roll <= 14:
        return 2, None
    elif 15 <= roll <= 18:
        return 3, None
    elif 19 <= roll <= 23:
        return 4, None
    elif 24 <= roll <= 25:
        return 5, None
    elif 26 <= roll <= 26:
        return 6, None
    elif 30 <= roll <= 34:
        return 7, None
    elif 35 <= roll <= 37:
        return 8, None
    elif roll == 38:
        return 10, None
    elif roll == 39:
        return 11, None
    elif roll in [40, 41]:
        return 12, None
    elif 42 <= roll <= 56:
        return 14, None
    elif roll == 57:
        return 16, sortear_movimento_vertical()
    elif roll in [58, 59]:
        return 19, sortear_movimento_vertical()
    elif roll in [60, 61]:
        return 20, sortear_movimento_vertical()
    elif roll == 62:
        return 21, None
    elif 63 <= roll <= 65:
        return 22, None
    elif 66 <= roll <= 68:
        return 23, None
    elif roll == 69:
        return 24, None
    elif 70 <= roll <= 74:
        return 25, None
    elif 75 <= roll <= 78:
        return 26, None
    elif roll in [79, 80]:
        return 27, None
    elif roll in [81, 82]:
        return 28, None
    elif roll in [83, 84]:
        return 29, None
    elif roll == 85:
        return 31, None
    elif 86 <= roll <= 95:
        return 39, None
    else:
        return 45, None

def mines_avenue():
    roll = roll_d100()
    vertical = None
    if 1 <= roll <= 59:
        return 1, None
    elif roll == 60:
        return 9, None
    elif 61 <= roll <= 63:
        return 10, None
    elif 64 <= roll <= 65:
        return 11, None
    elif 66 <= roll <= 67:
        return 13, None
    elif 68 <= roll <= 77:
        return 14, None
    elif 78 <= roll <= 80:
        return 16, sortear_movimento_vertical()
    elif 81 <= roll <= 85:
        return 17, sortear_movimento_vertical()
    elif roll == 86:
        return 19, sortear_movimento_vertical()
    elif roll == 87:
        return 20, sortear_movimento_vertical()
    elif roll == 88:
        return 21, None
    elif 89 <= roll <= 90:
        return 23, None
    elif 91 <= roll <= 95:
        return 39, None
    elif 96 <= roll <= 99:
        return 43, None
    else:
        return 45, None

def mines_road():
    roll = roll_d100()
    vertical = None
    if 1 <= roll <= 30:
        return 1, None
    elif roll == 31:
        return 9, None
    elif 32 <= roll <= 35:
        return 10, None
    elif 36 <= roll <= 37:
        return 11, None
    elif roll == 38:
        return 13, None
    elif 39 <= roll <= 48:
        return 14, None
    elif 49 <= roll <= 50:
        return 16, sortear_movimento_vertical()
    elif 51 <= roll <= 58:
        return 17, sortear_movimento_vertical()
    elif roll == 59:
        return 19, sortear_movimento_vertical()
    elif roll == 60:
        return 20, sortear_movimento_vertical()
    elif 61 <= roll <= 63:
        return 21, None
    elif 64 <= roll <= 66:
        return 22, None
    elif 67 <= roll <= 69:
        return 23, None
    elif 70 <= roll <= 73:
        return 39, None
    elif 74 <= roll <= 77:
        return 40, None
    elif 78 <= roll <= 81:
        return 41, None
    elif 82 <= roll <= 83:
        return 42, None
    elif 84 <= roll <= 86:
        return 43, None
    elif 87 <= roll <= 98:
        return 44, None
    else:
        return 45, None

def mines_accessway():
    roll = roll_d100()
    vertical = None
    if 1 <= roll <= 10:
        return 1, None
    elif 11 <= roll <= 15:
        return 2, None
    elif 16 <= roll <= 20:
        return 3, None
    elif 21 <= roll <= 25:
        return 4, None
    elif 26 <= roll <= 26:
        return 5, None
    elif 30 <= roll <= 33:
        return 6, None
    elif 34 <= roll <= 38:
        return 7, None
    elif 39 <= roll <= 44:
        return 8, None
    elif roll == 45:
        return 10, None
    elif 46 <= roll <= 55:
        return 14, None
    elif 56 <= roll <= 60:
        return 15, None
    elif roll == 61:
        return 16, sortear_movimento_vertical()
    elif roll == 62:
        return 17, sortear_movimento_vertical()
    elif 63 <= roll <= 65:
        return 19, sortear_movimento_vertical()
    elif 66 <= roll <= 68:
        return 20, sortear_movimento_vertical()
    elif roll == 69:
        return 21, None
    elif roll in [70, 71]:
        return 22, None
    elif roll in [72, 73]:
        return 23, None
    elif 74 <= roll <= 76:
        return 25, None
    elif roll == 77:
        return 30, None
    elif 78 <= roll <= 82:
        return 39, None
    elif 83 <= roll <= 85:
        return 40, None
    elif 86 <= roll <= 88:
        return 41, None
    elif 89 <= roll <= 90:
        return 42, None
    elif roll == 91:
        return 43, None
    elif 92 <= roll <= 96:
        return 44, None
    else:
        return 45, None

def mineway():
    roll = roll_d100()
    vertical = None
    if 1 <= roll <= 10:
        return 1, None
    elif 11 <= roll <= 13:
        return 2, None
    elif 14 <= roll <= 16:
        return 3, None
    elif 17 <= roll <= 20:
        return 4, None
    elif 21 <= roll <= 23:
        return 5, None
    elif 24 <= roll <= 26:
        return 6, None
    elif 27 <= roll <= 31:
        return 7, None
    elif 32 <= roll <= 36:
        return 8, None
    elif roll == 37:
        return 10, None
    elif 38 <= roll <= 40:
        return 11, None
    elif 41 <= roll <= 43:
        return 12, None
    elif 44 <= roll <= 48:
        return 14, None
    elif roll == 49:
        return 16, sortear_movimento_vertical()
    elif 50 <= roll <= 55:
        return 17, sortear_movimento_vertical()
    elif roll == 56:
        return 19, sortear_movimento_vertical()
    elif roll == 57:
        return 20, sortear_movimento_vertical()
    elif 58 <= roll <= 60:
        return 21, None
    elif 61 <= roll <= 63:
        return 22, None
    elif 64 <= roll <= 66:
        return 23, None
    elif 67 <= roll <= 70:
        return 39, None
    elif 71 <= roll <= 73:
        return 40, None
    elif 74 <= roll <= 79:
        return 41, None
    elif 80 <= roll <= 83:
        return 42, None
    elif roll == 84:
        return 43, None
    elif 85 <= roll <= 99:
        return 44, None
    else:
        return 45, None

def specific_feature_city():
    roll = roll_d100()
    vertical = None
    if 1 <= roll <= 15:
        return 1, None
    elif 16 <= roll <= 25:
        return 9, None
    elif 26 <= roll <= 35:
        return 10, None
    elif 36 <= roll <= 40:
        return 11, None
    elif roll in [41, 42]:
        return 12, None
    elif 43 <= roll <= 52:
        return 13, None
    elif 53 <= roll <= 66:
        return 14, None
    elif 67 <= roll <= 73:
        return 16, sortear_movimento_vertical()
    elif 74 <= roll <= 77:
        return 17, sortear_movimento_vertical()
    elif 78 <= roll <= 80:
        return 18, sortear_movimento_vertical()
    elif 81 <= roll <= 83:
        return 19, sortear_movimento_vertical()
    elif 84 <= roll <= 86:
        return 20, None
    elif 87 <= roll <= 89:
        return 21, None
    elif 90 <= roll <= 92:
        return 22, None
    elif 93 <= roll <= 95:
        return 23, None
    else:
        return 45, None

def specific_feature_mine():
    roll = roll_d100()
    vertical = None
    if 1 <= roll <= 40:
        return 1, None
    elif roll in [41, 42]:
        return 9, None
    elif 43 <= roll <= 45:
        return 10, None
    elif 46 <= roll <= 48:
        return 11, None
    elif 49 <= roll <= 53:
        return 12, None
    elif 54 <= roll <= 68:
        return 14, None
    elif roll in [69, 70]:
        return 16, sortear_movimento_vertical()
    elif 71 <= roll <= 76:
        return 17, sortear_movimento_vertical()
    elif roll in [77, 78]:
        return 19, sortear_movimento_vertical()
    elif roll in [79, 80]:
        return 20, sortear_movimento_vertical()
    elif 81 <= roll <= 85:
        return 21, None
    elif 86 <= roll <= 90:
        return 22, None
    elif 91 <= roll <= 95:
        return 23, None
    else:
        return 45, None

directions = {
    "FRENTE": (0, 1, 0),
    "MEIA-VOLTA": (0, -1, 0),
    "DIREITA": (1, 0, 0),
    "ESQUERDA": (-1, 0, 0),
    "SUBIR": (0, 0, 1),
    "DESCER": (0, 0, -1),
    "SUBIR2": (0, 0, 2),
    "DESCER2": (0, 0, -2)
}

def sortear_movimento_vertical():
    roll = random.randint(1, 100)
    if 1 <= roll <= 35:
        return 46
    elif 36 <= roll <= 70:
        return 47
    elif 71 <= roll <= 80:
        return 48
    elif 81 <= roll <= 90:
        return 49
    elif 91 <= roll <= 100:
        return 50

citylevel = {
    -7: "Lower City",
    -6: "Lower Cityr",
    -5: "Lower City",
    -4: "Lower City",
    -3: "Central city deep",
    -2: "Central city deep",
    -1: "Central city deep",
    0: "Central city level",
    1: "Central city level",
    2: "Central city level",
    3: "Upper City",
    4: "Upper City",
    5: "Upper City",
    6: "Upper City"
}

locais = {
    1: "City Avenue",
    2: "City Road Upper",
    3: "City Road Central",
    4: "City Road Lower",
    5: "City Accessway Upper",
    6: "City Accessway Central",
    7: "City Accessway Lower",
    8: "Mines avenue",
    9: "Mines road",
    10: "Mines acessway",
    11: "Mineway",
    12: "SpecificFeatureCity",
    13: "SpecificFeatureMine"
}

### CÓDIGO ####################

class Cell:
    def __init__(self, x, y, z):
        self.x = x
        self.y = y
        self.z = z
        self.features = []

    def __repr__(self):
        distancia = 100

        z_dist = self.z

        x_dist = self.x * distancia
        if x_dist == 0:
            XorY = 0
            localizacao_x = 0
        elif x_dist > 0:
            XorY = +1
            localizacao_x = "Leste"
        else:
            XorY = +1
            localizacao_x = "Oeste"

        y_dist = self.y * distancia
        if y_dist == 0:
            XorY = 0
            localizacao_y = 0
        elif y_dist > 0:
            XorY += 1
            localizacao_y = "Norte"
        else:
            XorY += 1
            localizacao_y = "Sul"

        nivel = citylevel.get(self.z)

        if XorY == 2:
            return f"andou aproximadamente {x_dist} pés para o {localizacao_x} e {y_dist} pés para {localizacao_y}. Você está em {nivel}. Nesse lugar você vê: {' '.join(self.features)}"
        else:
            if x_dist != 0:
                movientacaounilateral = x_dist
                localizacaoxy = localizacao_x
                return f"andou aproximadamente {movientacaounilateral} pés para o {localizacaoxy}. Você está em {nivel}. Nesse lugar você vê: {' '.join(self.features)}"
            elif y_dist != 0:
                movientacaounilateral = y_dist
                localizacaoxy = localizacao_y
                return f"andou aproximadamente {movientacaounilateral} pés para o {localizacaoxy}. Você está em {nivel}.  Nesse lugar você vê: {' '.join(self.features)}"
            else:
                return f"está na entrada da cidade. Você está em {nivel}. Nesse lugar você vê: {' '.join(self.features)}"


class GridMap:
    def __init__(self):
        self.grid = {}

    def get_cell(self, x, y, z):
        key = (x, y, z)
        if key not in self.grid:
            self.grid[key] = self.generate_cell(x, y, z)
        return self.grid[key]

    def generate_cell(self, x, y, z):
        cell = Cell(x, y, z)
        feature_code, vertical = city_avenue()
        feature1 = dicionario.get(feature_code)
        cell.features.append(feature1)

        if vertical != None:
            feature2 = dicionario.get(vertical)
            cell.features.append(feature2)
        return cell


class Player:
    def __init__(self, x=0, y=0, z=0):
        self._x = x
        self._y = y
        self._z = z
        self.MIN_X = -1000
        self.MAX_X = 1000
        self.MIN_Y = -1000
        self.MAX_Y = 1000
        self.MIN_Z = -7
        self.MAX_Z = 6

    @property
    def x(self):
        return self._x

    @property
    def y(self):
        return self._y

    @property
    def z(self):
        return self._z

    def move(self, dir_name):
        if dir_name in directions:
            dx, dy, dz = directions[dir_name]
            new_x = self._x + dx
            new_y = self._y + dy
            new_z = self._z + dz

            # Verifica limites
            if (self.MIN_X <= new_x <= self.MAX_X and
                    self.MIN_Y <= new_y <= self.MAX_Y and
                    self.MIN_Z <= new_z <= self.MAX_Z):

                self._x = new_x
                self._y = new_y
                self._z = new_z
                return True
            else:
                print("Você tenta seguir o caminho, mas ele é sem saída. Você retorna para onde estava inicialmente.")
                return False
        return False

player = Player()
mapa = GridMap()

while True:
    cell = mapa.get_cell(player.x, player.y, player.z)
    print(f"Você {cell}")

    # Lista de palavras-chave que habilitam movimento vertical
    vertical_keywords = {"Stairwell", "Rampway", "Elevator", "Slide", "Chute", "Pole"}

    # Verifica se ALGUMA feature contém ALGUMA palavra-chave
    has_vertical_access = any(
        any(keyword.lower() in feature.lower() for keyword in vertical_keywords)
        for feature in cell.features
    )

    if has_vertical_access:
        comando = input("Digite direção (Frente, Meia-volta, Direita, Esquerda, Subir, Descer) ou Q para sair: ").upper()
    else:
        comando = input("Digite direção (Frente, Meia-volta, Direita, Esquerda) ou Q para sair: ").upper()

    if comando == "Q":
        print("Saindo do jogo.")
        break
    elif not player.move(comando):
        print("Direção inválida.")
